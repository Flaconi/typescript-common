---
# Required vars in travis
#
#  * AWS_ACCOUNT_ID
#  * AWS_ACCESS_KEY_ID
#  * AWS_SECRET_ACCESS_KEY
#  * AWS_REGION
#  * GITHUB_TOKEN
#  * SONARCLOUD_TOKEN

###
### Travis settings
###
sudo: required
services:
  - docker

language: minimal

cache:
  yarn: true
  directories:
    - node_modules

env:
  # Find more details about the helpers project here: https://github.com/Flaconi/web-project-helpers
  HELPERS_PROJECT_NAME: Flaconi/web-project-helpers
  HELPERS_VERSION: stable
  HELPERS_DIR: /tmp/flaconi-web-project-helpers
  # Specify Docker image details
  DOCKER_IMAGE_NAME: 558030440183.dkr.ecr.eu-central-1.amazonaws.com/typescript-common
  DOCKERFILE_PATH: infra/docker/Dockerfile
  PROJECT_NAME: typescript-common
  # Enable additional debugging messages
  DEBUG: true

_base_ci_helpers_install: &_base_ci_helpers_install
  install:
    # Download the helpers
    - git clone --branch "${HELPERS_VERSION}"
      --single-branch --depth 1
      "https://${GITHUB_TOKEN}:x-oauth-basic@github.com/${HELPERS_PROJECT_NAME}.git" "${HELPERS_DIR}"

###
### Pipelines
###
jobs:
  fast_finish: true
  include:
    - stage: Build, Test and Push
      <<: *_base_ci_helpers_install
      skip_cleanup: true
      script:
        # Build
        - DOCKER_IMAGE_TARGET=build ${HELPERS_DIR}/scripts/workflows/simple/docker-build || travis_terminate 1

        # Decide on pipeline cases (PR, TAG, MASTER, BRANCH)
        - ${HELPERS_DIR}/scripts/workflows/simple/docker-push

        # Test service in dev k8s cluster
        - ${HELPERS_DIR}/scripts/k8s-functional-tests

    - stage: Linting
      <<: *_base_ci_helpers_install
      skip_cleanup: true
      script:
        # Login to AWS to be able to pull Docker images from ECR
        - ${HELPERS_DIR}/scripts/aws-login
        # Pull the Docker image from ECR
        - docker pull "${DOCKER_IMAGE_NAME}:${TRAVIS_COMMIT}"
        # Create a throwaway container
        - image_id=$(docker create "${DOCKER_IMAGE_NAME}:${TRAVIS_COMMIT}")

        # Copy coverage directory from container to local path
        - docker cp "${image_id}:/usr/src/app/coverage" ./coverage
        # Clean up
        - docker rm -f "${image_id}"

        # Replace path in coverage report to local
        - find ./coverage -type f -exec sed -i 's#/usr/src/app#'$PWD'#' {} \;

        - "${HELPERS_DIR}/scripts/sonar-lint"

    # Deploy to dev
    - stage: Deploy on Kubernetes
      if: type = pull_request AND tag IS blank
      <<: *_base_ci_helpers_install
      skip_cleanup: true
      script:
        - ${HELPERS_DIR}/scripts/k8s-ci-env
        - ${HELPERS_DIR}/scripts/workflows/multi-branch/k8s-deploy ${DOCKER_IMAGE_NAME}:${TRAVIS_COMMIT} dev flaconi-dev

    # Deploy to testing and dev
    - stage: Deploy on Kubernetes
      if: branch = master AND tag IS blank AND type != pull_request
      <<: *_base_ci_helpers_install
      skip_cleanup: true
      script:
        # Deploy to testing
        - ${HELPERS_DIR}/scripts/k8s-ci-env
        - ${HELPERS_DIR}/scripts/k8s-deploy ${DOCKER_IMAGE_NAME}:${TRAVIS_COMMIT} testing flaconi-testing-admin
        # Deploy to dev without "pr-" prefix
        - K8S_ENV=dev ${HELPERS_DIR}/scripts/k8s-ci-env
        - ${HELPERS_DIR}/scripts/k8s-deploy ${DOCKER_IMAGE_NAME}:${TRAVIS_COMMIT} dev flaconi-dev-admin

    - stage: Publish NPM package
      if: type = pull_request AND tag IS blank
      <<: *_base_ci_helpers_install
      skip_cleanup: true
      script:
        # Login to AWS to be able to pull Docker images from ECR
        - ${HELPERS_DIR}/scripts/aws-login
        # Pull the Docker image from ECR
        - docker pull "${DOCKER_IMAGE_NAME}:${TRAVIS_COMMIT}"
        # Create a throwaway container
        - image_id=$(docker create "${DOCKER_IMAGE_NAME}:${TRAVIS_COMMIT}")

        # Copy build directory from container to local path
        - docker cp "${image_id}:/usr/src/app/build/." .
        # Clean up
        - docker rm -f "${image_id}"

        # Publish the NPM package
        - ${HELPERS_DIR}/scripts/yarn-publish

    - stage: Publish NPM package
      if: tag IS present
      <<: *_base_ci_helpers_install
      skip_cleanup: true
      script:
        # Login to AWS to be able to pull Docker images from ECR
        - ${HELPERS_DIR}/scripts/aws-login
        # Pull the Docker image from ECR
        - docker pull "${DOCKER_IMAGE_NAME}:${TRAVIS_TAG}"
        # Create a throwaway container
        - image_id=$(docker create "${DOCKER_IMAGE_NAME}:${TRAVIS_TAG}")

        # Copy build directory from container to local path
        - docker cp "${image_id}:/usr/src/app/build/." .
        # Clean up
        - docker rm -f "${image_id}"

        # Publish the NPM package
        - ${HELPERS_DIR}/scripts/yarn-publish
